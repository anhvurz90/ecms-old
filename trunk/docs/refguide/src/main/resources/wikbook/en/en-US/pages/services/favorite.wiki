FavoriteService is used to manage all favorite contents added by user.

|| *Method* || *Return* || *Prototype* || *Desription* ||
| *addFavorite* | {{void}} | addFavorite(Node node, String userName) throws Exception; | Add favorite to node{example}{example}@param node Add favorite to this node{example}{example}@param userName The user added favorite{example}{example}@throws Exception The exception will be raised if the node can not add mixin |
| removeFavorite | {{void}} | removeFavorite(Node node, String userName) throws Exception; | Remove favorite from node{example}{example}@param node Remove favourite out of this node{example}{example}@param userName Remove the name of current user out of property exo:favouriter{example}{example}@throws Exception |
| *getAllFavoriteNodesByUser* | {{List<Node>}} | getAllFavoriteNodesByUser(String workspace, String repository, String userName) throws Exception; | Get all favourite nodes by user{example}{example}@param workspace: Get all favorite nodes from this workspace{example}{example}@param repository: Get all favorite nodes from this repository{example}{example}@param sessionProvider: The session provider which will be used to get session{example}{example}@param userName: User added favorite to the node{example}{example}@return List<Node>: All favorite node added by user{example}{example}@throws Exception |
| *isFavoriter* | {{boolean}} | isFavoriter(String userName, Node node) throws Exception ;| Check if user is in favorite list of node{example}{example}@param node: Node to check{example}{example}@param userName: The user to check |
