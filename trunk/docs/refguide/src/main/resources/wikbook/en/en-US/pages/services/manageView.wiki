ManageViewService is used to work with views. In this service, there are many functions which allow you to add, edit, delete, get views.

|| *Method* || *Return* || *Prototype* || *Desription* ||
| *addView* | {{void}} | {{ addView(String name, String permissions, String template, List<?> tabs, String repository)throws Exception}} | Insert a new view by giving the following params:{example}{example}@param name: The name of view{example}{example}@param permissions: who can access the view{example}{example}@param template: The name of template{example}{example}@param tabs: list of tabs{example}{example}@param repository: The name of repository{example}{example}@throws Exception: throws exception |
| *getViewByName* | {{Node}} | {{getViewByName(String viewName, String repository, SessionProvider provider) throws Exception}} | Return to specify view depending on Name by giving the following params:{example}{example}@param viewName: The name of view{example}{example}@param repository: The name of repository{example}{example}@param provider: The SessionProvider object is used to managed Sessions{example}{example}@throws Exception: throws exception |
| *getButtons* | {{List<?>}} | {{getButtons() throws Exception}} | Return all string of buttons:{example}{example} @throws Exception: throws exception |
| *removeView* | {{void}} | {{removeView(String viewName, String repository) throws Exception}} | Remove the view by giving the following params:{example}{example}@param viewName: The name of view{example}{example}@param repository: The name of repository{example}{example}@throws Exception: throws exception |
| *getAllViews* | {{List<ViewConfig>}} | {{getAllViews(String repository) throws Exception}} | Return all views of the repository is configed in XML file by giving the following params:{example}{example}@param repository: The name of repository:{example}{example}@throws Exception: throws exception |
| *hasView* | {{boolean}} | {{hasView(String name, String repository) throws Exception}}| Return true if the given repository has view by giving the following params:{example}{example}@param name: The name of view{example}{example}@param repository: The name of repository{example}{example}@throws Exception: throws exception |
|* getTemplateHome* | {{Node}} | {{getTemplateHome(String homeAlias, String repository, SessionProvider provider) throws Exception}} | Get teamplate Node that has path by giving the following params:{example}{example}@param homeAlias{example}{example}@param repository: The name of repository{example}{example}@param provider: The SessionProvider object is used to managed Sessions{example}{example}@throws Exception: throws exception |
| *getAllTemplates* | {{List<Node>}} | {{getAllTemplates(String homeAlias, String repository,SessionProvider provider) throws Exception}} | Get all nodes that have template path to the given node{example}{example}@param homeAlias: Alias of template home{example}{example}@param repository: The name of repository{example}{example}@param provider: The SessionProvider object is used to managed Sessions{example}{example}@throws Exception: throws exception |
| *getTemplate* | {{Node}} | {{getTemplate(String path, String repository,SessionProvider provider) throws Exception}} | Return node that has path of the repository{example}{example}@param path: The path of template{example}{example}@param repository: The name of repository{example}{example}@param provider: SessionProvider{example}{example}@throws Exception: throws exception |
| *addTemplate* | {{String}} | {{addTemplate(String name, String content, String homePath, String repository)throws Exception}} | Insert a new template for node by specified path{example}{example}@param name: The name of new template{example}{example}@param content: The property of template{example}{example}@param homePath: The path of specified node{example}{example}@param repository: The name of repository{example}{example}@throws Exception: throws exception |
| *removeTemplate* | {{void}} | {{removeTemplate(String templatePath, String repository) throws Exception}} | Remove the template to the given node by specifyinh the templatePath params{example}{example}@param templatePath: The path of template{example}{example}@param repository: The name of repository{example}{example}@throws Exception: throws exception |
| *addTab* | {{void}} | {{addTab(Node view, String name, String buttons) throws Exception}} | Insert a new tab to the given view node by specifying the following params:{example}{example}@param view: Specify the node to add a tab{example}{example}@param name: The name of tab{example}{example}@param buttons: The buttons of tab{example}{example}@throws Exception: throws exception |
| *init* | {{void}} | {{init(String repository) throws Exception}} | Get all template that is configured in XML file of specified repository{example}{example}@param repository: The name of repository{example}{example}@throws Exception: throws exception |

