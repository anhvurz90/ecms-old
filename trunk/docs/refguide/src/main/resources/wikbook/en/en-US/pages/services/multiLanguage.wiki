MultiLanguageService is used for working with language of node. In this service there are many functions which allow you to add, edit, delete language of node.

|| *Method* || *Return* || *Prototype* || *Desription* ||
| getSupportedLanguages | List<String> | getSupportedLanguages(Node node) throws Exception | Returns value of exo:language property of the node{example}{example}@param node: The current node{example}{example}@throws Exception: throws exception |
| setDefault | void | setDefault(Node node, String language, String repositoryName) throws Exception | Set data for current node{example}{example}@param node: The current node{example}{example}@param language: The language name{example}{example}@param repositoryName: The name of repository{example}{example}@throws Exception: throws exception |
| addLanguage | void | addLanguage(Node node, Map inputs, String language, boolean isDefault) throws Exception | Add new language for current node{example}{example}@param node: The current node{example}{example}@param inputs: Map includes key and value of property{example}{example}@param language: The name of language{example}{example}@param isDefault: flag to define default language is used or not{example}{example}@throws Exception: throws exception |
| addLanguage | void | addLanguage(Node node, Map inputs, String language, boolean isDefault, String nodeType) throws Exception | Add new language for current node{example}{example}@param node: The current node{example}{example}@param inputs: Map includes key and value of property{example}{example}@param language: The name of language{example}{example}@param isDefault: flag to define default language is used or not{example}{example}@param nodeType: The name of NodeType{example}{example}@throws Exception: throws exception |
| addFileLanguage | void | addFileLanguage(Node node, String fileName, Value value, String mimeType, String language, String repositoryName, boolean isDefault) throws Exception | Add newLanguageNode node, then add new file to newLanguageNode{example}{example}@param node: The current node{example}{example}@param: fileName: The name of file{example}{example}@param value: The value of file{example}{example}@param mimeType: mimiType{example}{example}@param language: The name of language{example}{example}@param repositoryName: The name of repository{example}{example}@param isDefault: flag to use new language or default language{example}{example}@throws Exception: throws exception |
| addFileLanguage | void | addFileLanguage(Node node, String language, Map mappings, boolean isDefault) throws Exception | Add newLanguageNode node, then set property in mapping to newLanguageNode{example}{example}@param node: The current node{example}{example}@param language: The name of language{example}{example}@param mappings: Map includes property and value{example}{example}@param isDefault: flag to use new language or default language{example}{example}@throws Exception: throws exception |
| addLinkedLanguage | void | addLinkedLanguage(Node node, Node translationNode) | Add newLanguageNode node with a symlink, based on exo:language targetNode property{example}{example}@param node: The current node{example}{example}@param translationNode: target translation node{example}{example}@throws Exception: throws exception |
| addFolderLanguage | void | addFolderLanguage(Node node, Map inputs, String language, boolean isDefault, String nodeType, String repositoryName) throws Exception | Add new language node as a folder{example}{example}@param node: The current node{example}{example}@param inputs: Map includes key and value of property{example}{example}@param language: The name of language{example}{example}@param isDefault: flag to define default language is used or not{example}{example}@param nodeType: The name of nodeType{example}{example}@throws Exception: throws exception |
| getDefault | String | getDefault(Node node) | Returns Get value of property exo:language in current node{example}{example}@param node: The current node{example}{example}@throws Exception: throws exception |
| getLanguage | String | getLanguage(Node node, String language) throws Exception | Returns Get node following relative path = "languages/" + language{example}{example}@param node: The current node{example}{example}@param language: The name of language{example}{example}@throws Exception: throws exception |

