Package org.exoplatform.services.cms.records.RecordService;

|| *Method* || *Return* || *Prototype* || *Description* ||
| {{bindFilePlanAction}} |  {{void}} | {{bindFilePlanAction(Node filePlan, String repository) throws Exception;}} | Add action for filePlan node in repository{example}{example}@param filePlan: Node to process{example}{example}@param repository: Repository name{example}{example}@throws Exception |
| {{addRecord}} | {{void}} | {{addRecord(Node filePlan, Node record) throws RepositoryException;}} | Set property for filePlan node which is get from record node{example}{example}@param filePlan filePlan Node{example}{example}@param record: record Node{example}{example}@throws RepositoryException |
| {{computeCutoffs}} | {{void}} | {{computeCutoffs(Node filePlan) throws RepositoryException;}} | Determine if the next phase is a hold, transfer or destruction{example}{example}@param filePlan{example}{example}@throws RepositoryException |
| {{computeHolds}} | {{void}} | {{computeHolds(Node filePlan) throws RepositoryException;}} | Process transfer or destruction{example}{example}@param filePlan: filePlan node@throws RepositoryException |
| {{computeTransfers}} | {{void}} | {{computeTransfers(Node filePlan) throws RepositoryException;}} | Copy record node in filePlan node to path which value is {example}{example}rma:transferLocation property of filePlan Node{example}{example}@param filePlan{example}{example}@throws RepositoryException |
| {{computeAccessions}} | {{void}} | {{computeAccessions(Node filePlan) throws RepositoryException;}} | Copy record node in filePlan node to path which value is{example}{example}rma:accessionLocation property of filePlan Node{example}{example}@param filePlan{example}{example}@throws RepositoryException |
| {{computeDestructions}} | {{void}} | {{computeDestructions(Node filePlan) throws RepositoryException;}} | Remove record node in filePlan node{example}{example}@param filePlan: filePlan node{example}{example}@throws RepositoryException |
| {{getRecords}} | {{List<Node>}} | {{getRecords(Node filePlan) throws RepositoryException;}} | Get list of node by query statement{example}{example}@param filePlan: filePlan node{example}{example}@throws RepositoryException |
| {{getVitalRecords}} | {{List<Node>}} | {{getVitalRecords(Node filePlan) throws RepositoryException;}} | Get list of node by query statement with constraint concerning{example}{example}@param:vitalRecord{example}{example}@param filePlan: filePlan node{example}{example}@throws RepositoryException |
| {{getObsoleteRecords}} | {{List<Node>}} | {{getObsoleteRecords(Node filePlan) throws RepositoryException;}} | Get list of node by query statement with constraint concerning{example}{example}@param:isObsolete{example}{example}@param filePlan filePlan node{example}{example}@throws RepositoryException |
| {{getSupersededRecords}} | {{List<Node>}} | {{getSupersededRecords(Node filePlan) throws RepositoryException;}} | Get list of node by query statement with constraint concerning {example}{example}@param:superseded{example}{example}@param filePlan: filePlan node{example}{example}@throws RepositoryException |
| {{getCutoffRecords}} | {{List<Node>}} | {{getCutoffRecords(Node filePlan) throws RepositoryException;}} | Get list of node by query statement with constraint concerning{example}{example} @param:cutoffExecuted{example}{example}@param filePlan filePlan node{example}{example}@throws RepositoryException |
| {{getHolableRecords}} | {{List<Node>}} | {{getHolableRecords(Node filePlan) throws RepositoryException;}} | Get list of node by query statement with constraint concerning {example}{example}@param:holdExecuted{example}{example}@param filePlan: filePlan node{example}{example}@throws RepositoryException |
| {{getTransferableRecords}} | {{List<Node>}} | {{getTransferableRecords(Node filePlan) throws RepositoryException;}} | Get list of node by query statement with constraint concerning @param:transferExecuted{example}{example}@param filePlan: filePlan node{example}{example}@throws RepositoryException |
| {{getAccessionableRecords}} | {{List<Node>}} | {{getAccessionableRecords(Node filePlan) throws RepositoryException;}} | Get list of node by query statement with constraint concerning @param:accessionExecuted{example}{example}@param filePlan: filePlan node{example}{example}@throws RepositoryException |
| {{getDestroyableRecords}} | {{List<Node>}} | {{getDestroyableRecords(Node filePlan) throws RepositoryException;}} | Get list of param:destroyable node by query statement @param filePlan: filePlan node{example}{example}@param filePlan: filePlan node{example}{example}@throws RepositoryException |
