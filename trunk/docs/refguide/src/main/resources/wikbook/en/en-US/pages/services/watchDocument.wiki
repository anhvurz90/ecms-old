WatchDocumentService this service used to move documents to trash foder or restore.

|| *Method* || *Return* || *Prototype* || *Desription* ||
| *watchDocument* | {{void}} | {{watchDocument(Node documentNode, String userName, int notifyType) throws Exception;}} | Watching the document that is specified by the node by giving a userName, notifyType{example}{example}If the document is watching, all things that change its property will be notified to user specified by the userName{example}{example}@param documentNode:      Specify the document for watching{example}{example}@param userName:          the username of the current user who is voting. It can't be <code>null<code>{example}{example}@param notifyType:        Type of notification. It can be 0, 1 or 2{example}{example}0:   Notification by email{example}{example}1:   Notification by rss{example}{example}2:   Full notification{example}{example}@see                     Node{example}{example}@throws Exception |
| *getNotificationType* | {{int}} | {{getNotificationType(Node documentNode, String userName) throws Exception;}} | This method will get the type of notification for the specific document{example}{example}If that document is not a exo watchable document, the value return is \a-\a1{example}{example}If the notification is notified by email, the value return is 1 {example}{example}If the notification is notified by rss, the value return is 2{example}{example}If the notification is notified by rss and email, the value return is 0{example}{example}@param documentNode:      Specify the document for watching{example}{example}@param userName:          The username of the current user who is voting. It can't be <code>null<code>{example}{example}@see                     Node      {example}{example}@return                  0, 1, 2 or \a-\a1{example}{example}@throws Exception |
| *unwatchDocument* | {{void}} | {{unwatchDocument(Node documentNode, String userName, int notifyType) throws Exception;}} | Watching the document that is specified by the node by giving a userName, notifyType{example}{example}If the document is watching, all thing that changes its property will be notified to user specified by the userName{example}{example}@param documentNode:      Specify the document for watching{example}{example}@param userName:          the username of current user is votting. It can't be <code>null<code>{example}{example}@param notifyType:        Type of notification. It can be 0, 1 or 2{example}{example}0:   Notification by email{example}{example}1:   Notification by rss{example}{example}2:   Full notification{example}{example}@see                     Node{example}{example}@throws Exception |
